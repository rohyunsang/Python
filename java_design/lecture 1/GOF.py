# basic concept 
# 주요 기능 
# 언어는 독립적이며 모든 프로그래밍 언어에 적용가능
# 여전히 새로운 패턴 연구 진행 목적에 맞게 변경 가능

# 디자인 패턴의 장점
# 여러 프로젝트에서 재사용될 수 있음
# 설계 문제를 해결할 수 있음
# 오랜 시간에 걸쳐 유효성이 입증
# 신뢰할 수 있는 솔루션임

# 디자인 패턴은 23개가 있는데 3종류로 분류한다.
# 생성 패턴, 구조 패턴, 행위 패턴

# 생성 패턴
# 객체가 생성 되는 방식을 기반으로 작동, 객체 생성  관련 상세 로직을 숨김
# 코드와 생성되는 객체의 클래스는 서로 독립

# 구조 패턴
# 클래스와 객체를 더 큰 결과물로 합칠 수 있는 구조로 설계, 구조가 단순해지고 클래스와 객체 간의 상호관계를 파악할 수 있음
# 클래스 상속과 컴포지션에 의존

# 행위 패턴
# 객체 간의 상호작용과 책임을 기반으로 작동, 객체는 상호작용 하지만 느슨하게 결합돼야 함

